/*
    Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
    Copyright (c) 2012 - 2022 Xilinx, Inc. All Rights Reserved.
	SPDX-License-Identifier: MIT


    http://www.FreeRTOS.org
    http://aws.amazon.com/freertos


    1 tab == 4 spaces!
*/

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"

#define TIMER_ID	1
#define DELAY_10_SECONDS	10000UL
#define DELAY_1_SECOND		1000UL
#define TIMER_CHECK_THRESHOLD	9

/*define the LEDs addr*/
#define R 0x04
#define G 0x02
#define B 0x03

/*-----------------------------------------------------------*/

/* The Tx and Rx tasks as described at the top of this file. */
static void prvTxTask( void *pvParameters );
static void prvRxTask( void *pvParameters );
static void vTimerCallback( TimerHandle_t pxTimer );
/*-----------------------------------------------------------*/

/* The queue used by the Tx and Rx tasks, as described at the top of this
file. */
static TaskHandle_t xTxTask;
static TaskHandle_t xRxTask;
static QueueHandle_t xQueue = NULL;
static TimerHandle_t xTimer = NULL;
char HWstring[15] = "Hello World";
long RxtaskCntr = 0;
XGpio gpio;

#if (configSUPPORT_STATIC_ALLOCATION == 1)
	#define QUEUE_BUFFER_SIZE		100
	uint8_t ucQueueStorageArea[ QUEUE_BUFFER_SIZE ];
	StackType_t xStack1[ configMINIMAL_STACK_SIZE ];
	StackType_t xStack2[ configMINIMAL_STACK_SIZE ];
	StaticTask_t xTxBuffer,xRxBuffer;
	StaticTimer_t xTimerBuffer;
	static StaticQueue_t xStaticQueue;
#endif

void driverInit()
{
	int status;
	XGpio_Initialize(&gpio, XPAR_AXI_GPIO_0_DEVICE_ID);
	if(status != XST_SUCCESS)
		xil_printf("Error: GPIO unsuccessfully initialized!");
	else
		xil_printf("Info: GPIO successfully initialized!");
}

void configGpio(){
	XGpio_SetDataDirection(&gpio, 1, 0);
	XGpio_SetDataDirection(&gpio, 2, 1);

	XGpio_DiscreteSet(&gpio, 1, 0);
}

void runProject(){
	int button;
	while(1){
		button = XGpio_DiscreteRead(&gpio, 2);
		switch(button) {
			case 1:
				xil_printf("%d: ");
				XGpio_DiscreteWrite(&gpio, 1, R);
				print("\tRED\n\r");
				break;
			case 2:
				xil_printf("%d: ");
				XGpio_DiscreteWrite(&gpio, 1, G);
				print("\tGREEN\n\r");
				break;
			case 4:
				xil_printf("%d: ");
				XGpio_DiscreteWrite(&gpio, 1, B);
				print("\tBLUE\n\r");
				break;
			case 8:
				xil_printf("%d: ", button);
				print("\tRGB\n\r");
				XGpio_DiscreteWrite(&gpio, 1, R);
				sleep(1);
				XGpio_DiscreteWrite(&gpio, 1, R);
				sleeop(1);

				XGpio_DiscreteWrite(&gpio, 1, G);
				sleep(1);
				XGpio_DiscreteWrite(&gpio, 1, G);
				sleeop(1);

				XGpio_DiscreteWrite(&gpio, 1, B);
				sleep(1);
				XGpio_DiscreteWrite(&gpio, 1, B);
				sleeop(1);


				break;
			default:
				xil_printf("%d ");
				XGpio_DiscreteWrite(&gpio, 1, R);
				XGpio_DiscreteWrite(&gpio, 1, G);
				XGpio_DiscreteWrite(&gpio, 1, B);
				break;
		}
	}
}


int main( void )
{
	const TickType_t x10seconds = pdMS_TO_TICKS( DELAY_10_SECONDS );

	init_platform();
	xil_printf( "\nHello from Freertos example main displayed on COM port\r\n" );
	driverInit();

	configGpio();

	runProject();
	cleanup_platform();

}

